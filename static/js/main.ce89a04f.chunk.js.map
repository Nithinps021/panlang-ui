{"version":3,"sources":["components/Navbar.js","pages/Home.js","pages/Order.js","components/StockCard.js","api/Stock.js","pages/Stock.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","bg","Brand","as","Link","to","Nav","className","Home","Container","Order","StockCard","stockItem","lang","useState","hasLanguage","setHasLanguage","useEffect","undefined","Card","style","margin","Body","Title","name","Text","count","textAlign","timestamp","Date","toDateString","Badge","variant","a","axios","get","BASE_API_URL","LANGUAGES","Stock","stock","setStock","error","setError","language","setLanguage","fetchStock","then","res","data","catch","e","Dropdown","onChange","console","log","Toggle","id","size","Menu","map","Item","onSelect","key","eventKey","length","Spinner","animation","role","item","_id","App","basename","process","รง","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ce89a04f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nfunction NavigationBar() {\r\n  return (\r\n    <Navbar bg=\"light\">\r\n      <Navbar.Brand as={Link} to=\"/\">PanLang</Navbar.Brand>\r\n      <Nav className=\"mr-auto\">\r\n        <Nav.Link as={Link} to=\"/order\">Order</Nav.Link>\r\n        <Nav.Link as={Link} to=\"/stock\">Stock</Nav.Link>\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default NavigationBar;\r\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nfunction Home() {\n  return (\n    <Container>\n      <h1>Welcome to PanLang!</h1>\n    </Container>\n  );\n}\n\nexport default Home;\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction Order() {\r\n  return (\r\n    <Container>\r\n      <h1>Order</h1>\r\n      <p>This is gonna be an order form in the future</p>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Order;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nfunction StockCard({ stockItem, lang = 'name' }) {\r\n  const [hasLanguage, setHasLanguage] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setHasLanguage(stockItem[lang] !== undefined);\r\n  }, [lang, stockItem]);\r\n\r\n  return (\r\n    <Card style={{ margin: 5 }}>\r\n      <Card.Body>\r\n        <Card.Title>\r\n          {hasLanguage ? stockItem[lang] : stockItem.name}\r\n        </Card.Title>\r\n        <Card.Text>Amount: {stockItem.count}</Card.Text>\r\n        <Card.Text style={{ textAlign: 'right' }}>\r\n          Last updated:{' '}\r\n          {stockItem.timestamp !== undefined\r\n            ? new Date(stockItem.timestamp).toDateString()\r\n            : 'Unavailable'}\r\n        </Card.Text>\r\n        {!hasLanguage && (\r\n          <Badge variant=\"danger\">Language unavailable: {lang}</Badge>\r\n        )}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default StockCard;\r\n","import axios from 'axios';\r\n\r\nconst BASE_API_URL = 'https://panlang.herokuapp.com';\r\n\r\nexport default async function fetchStock() {\r\n  return await axios.get(BASE_API_URL + '/stock');\r\n}","import React, { useEffect, useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport StockCard from '../components/StockCard';\r\nimport fetchStock from '../api/Stock';\r\n\r\n// TODO: move all languages to a more global constant\r\nconst LANGUAGES = ['english', 'spanish', 'french', 'mandarin'];\r\n\r\n/**\r\n * Displays the stock of food pantry with options for language\r\n */\r\nfunction Stock() {\r\n  const [stock, setStock] = useState([]);\r\n  const [error, setError] = useState(false);\r\n  const [language, setLanguage] = useState(LANGUAGES[0]);\r\n\r\n  useEffect(() => {\r\n    fetchStock()\r\n      .then((res) => {\r\n        setStock(res.data);\r\n      })\r\n      .catch((e) => setError(true));\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Stock</h1>\r\n      <Dropdown onChange={(e) => console.log(e)}>\r\n        <Dropdown.Toggle id=\"dropdown-basic\" size=\"lg\">\r\n          Language: {language}\r\n        </Dropdown.Toggle>\r\n\r\n        <Dropdown.Menu>\r\n          {LANGUAGES.map((lang) => (\r\n            <Dropdown.Item\r\n              onSelect={(key) => setLanguage(key)}\r\n              eventKey={lang}\r\n              key={lang}\r\n            >\r\n              {lang}\r\n            </Dropdown.Item>\r\n          ))}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      {stock.length === 0 && (\r\n        <Spinner animation=\"border\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n      )}\r\n      {stock &&\r\n        stock.map((item) => (\r\n          <StockCard\r\n            stockItem={item}\r\n            lang={language === 'english' ? 'name' : language}\r\n            key={item._id}\r\n          />\r\n        ))}\r\n      {error && <p>Error :(</p>}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Stock;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Navbar from './components/Navbar';\r\nimport Home from './pages/Home';\r\nimport Order from './pages/Order';\r\nimport Stock from './pages/Stock';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Navbar รง/>\r\n      <br />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"/stock\">\r\n          <Stock />\r\n        </Route>\r\n        <Route path=\"/order\">\r\n          <Order />\r\n        </Route>\r\n        <Route path=\"*\">\r\n          <h1>404</h1>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}