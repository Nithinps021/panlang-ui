{"version":3,"sources":["images/logo.png","components/Navbar.js","api/Client.js","api/People.js","pages/Home.js","pages/Order.js","api/Stock.js","components/StockModal.js","components/StockCard.js","components/StockInput.js","components/Loading.js","constants/Languages.js","pages/Stock.js","components/OrderModal.js","components/OrderCard.js","pages/OrderStock.js","pages/SocketTest.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavigationBar","Navbar","bg","Brand","as","Link","to","id","src","require","alt","style","width","height","Nav","className","axios","create","baseURL","item","a","Client","post","then","res","catch","e","Home","useState","month","year","date","align","marginBottom","color","Button","variant","size","block","href","URLSearchParams","orderSchema","Yup","firstName","required","lastName","adults","moreThan","children","zipcode","lessThan","integer","orderNotes","OrderForm","history","useHistory","Container","backgroundColor","paddingBottom","textAlign","validationSchema","onSubmit","personInfo","push","fromForm","initialValues","handleSubmit","handleChange","touched","handleBlur","values","errors","isValid","Form","noValidate","Group","md","controlId","Label","Control","type","name","placeholder","onChange","isInvalid","Feedback","display","flexDirection","fetchStock","get","updateStockCount","updated","put","console","log","error","amountSchema","newCount","StockModal","show","handleClose","getStock","stockId","stockName","stockCount","Modal","onHide","aria-labelledby","centered","updatedCount","Header","closeButton","Title","Body","Footer","onClick","StockCard","stockItem","lang","showAmountModal","setShowAmountModal","hasLanguage","setHasLanguage","useEffect","undefined","Card","margin","Text","fontSize","fontWeight","count","timestamp","Date","toDateString","alignItems","padding","Badge","alignSelf","_id","stockSchema","StockInput","Accordion","Toggle","eventKey","Collapse","createStockItem","Loading","Spinner","animation","role","LANGUAGES","Stock","stock","setStock","setError","language","setLanguage","timeout","setTimeout","data","capitalize","s","charAt","toUpperCase","slice","Dropdown","Menu","map","Item","onSelect","key","length","OrderModal","onRequest","selectedAmount","setSelectedAmount","ButtonGroup","aria-label","disabled","requestedItem","requestedCount","countAfterRequest","OrderCard","showOrderModal","OrderStock","location","useLocation","state","requestedStockItems","setRequestedStockItems","concat","writeRequestToNotes","forEach","r","addPersonInfo","firstname","lastname","fulfilled","stockUpdatePromises","Promise","all","responses","listpeople","SocketTest","response","setResponse","socket","socketIOClient","on","eventHandler","off","index","emit","toString","App","basename","process","รง","exact","path","Order","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.231b24f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.07da641c.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nfunction NavigationBar() {\n  return (\n    <Navbar bg=\"light\">\n      <Navbar.Brand as={Link} to=\"/\">\n        <div id=\"logo\">\n          <img src={require('../images/logo.png')} alt=\"Pan-Lang\" style={{width:150, height:45}}></img>\n        </div>\n      </Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link as={Link} to=\"/order\">Order</Nav.Link>\n        <Nav.Link as={Link} to=\"/stock\">Stock</Nav.Link>\n      </Nav>\n    </Navbar>\n  );\n}\n\nexport default NavigationBar;\n","import axios from 'axios';\n\nexport const BASE_API_URL = 'https://panlang.herokuapp.com';\n\nexport default axios.create({\n  baseURL: BASE_API_URL,\n});\n","import Client from './Client';\n\nexport const PEOPLE_ENDPOINT = '/people';\n\nexport async function addPersonInfo(item) {\n  Client.post(PEOPLE_ENDPOINT, item)\n    .then((res) => {\n      return true;\n    })\n    .catch((e) => {\n      return false;\n    });\n}\n\nexport async function fetchPeople() {\n  const promise = await Client.get(PEOPLE_ENDPOINT);\n  return promise;\n}\n","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport { PEOPLE_ENDPOINT } from '../api/People';\nimport { BASE_API_URL } from '../api/Client';\n\nfunction Home() {\n  // TODO: find a way to select date\n  const [date, setDate] = useState({ month: 9, year: 2020 });\n\n  return (\n    <div>\n      <h1 align=\"center\" style={{ marginBottom: 20 }}>\n        Welcome to <font style={{ color: '#26B020' }}>Pan-Lang</font>!\n      </h1>\n      <div>\n        <Link to=\"/order\" style={{ color: 'white' }}>\n          <Button variant=\"success\" size=\"lg\" className=\"mb-3\" block>\n            New Order\n          </Button>\n        </Link>\n      </div>\n      <Link to=\"/stock\" style={{ color: 'white' }}>\n        <Button variant=\"success\" size=\"lg\" className=\"mb-3\" block>\n          Edit Stock\n        </Button>{' '}\n      </Link>\n\n      <br></br><br></br>\n      {/* I think we want an anchor tag w/ href and target=_blank , \n      if we use axios we have to hack around downloading the content for the user*/}\n      <a\n        href={`${BASE_API_URL}${PEOPLE_ENDPOINT}?${new URLSearchParams(date)}`}\n      >\n        <Button variant=\"success\" size=\"lg\" className=\"mb-3\" block>\n          Download Order Data\n        </Button>{' '}\n      </a>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, Form } from 'react-bootstrap';\nimport { useHistory } from 'react-router-dom';\n\nconst orderSchema = Yup.object({\n  firstName: Yup.string().required(),\n  lastName: Yup.string().required(),\n  adults: Yup.number().moreThan(-1).required(),\n  children: Yup.number().moreThan(-1).required(),\n  zipcode: Yup.number().moreThan(9999).lessThan(100000).integer().required(),\n  orderNotes: Yup.string().required(),\n});\n\nfunction OrderForm() {\n  const history = useHistory();\n\n  return (\n    <Container style={{ backgroundColor: 'white', paddingBottom: 120 }}>\n      <h1 style={{ textAlign: 'center' }}>Order</h1>\n      <Formik\n        validationSchema={orderSchema}\n        onSubmit={(personInfo) => {\n          history.push('/order-stock', { fromForm: true, personInfo })\n        }}\n        initialValues={{\n          firstName: '',\n          lastName: '',\n          adults: -1,\n          children: -1,\n          zipcode: -1,\n          orderNotes: 'test'\n        }}\n      >\n        {({\n          handleSubmit,\n          handleChange,\n          handleBlur,\n          values,\n          touched,\n          isValid,\n          errors,\n        }) => (\n          <div>\n            <Form noValidate onSubmit={handleSubmit}>\n              <Form.Group md=\"4\" controlId=\"orderForm1\">\n                <Form.Label>First name</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"firstName\"\n                  placeholder={'Enter first name here'}\n                  onChange={handleChange}\n                  isValid={touched.firstName && !errors.firstName}\n                  isInvalid={!!errors.firstName}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group md=\"4\" controlId=\"orderForm2\">\n                <Form.Label>Last name</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"lastName\"\n                  placeholder={'Enter last name here'}\n                  onChange={handleChange}\n                  isValid={touched.lastName && !errors.lastName}\n                  isInvalid={!!errors.lastName}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group md=\"4\" controlId=\"orderForm3\">\n                <Form.Label># of Adults</Form.Label>\n                <Form.Control\n                  type=\"number\"\n                  name=\"adults\"\n                  placeholder={'Enter number of adults in household'}\n                  onChange={handleChange}\n                  isValid={touched.adults && !errors.adults}\n                  isInvalid={!!errors.adults}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group md=\"4\" controlId=\"orderForm4\">\n                <Form.Label># of Children</Form.Label>\n                <Form.Control\n                  type=\"number\"\n                  name=\"children\"\n                  placeholder={'Enter number of children in household'}\n                  onChange={handleChange}\n                  isValid={touched.children && !errors.children}\n                  isInvalid={!!errors.children}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group md=\"4\" controlId=\"orderForm4\">\n                <Form.Label>ZIP Code</Form.Label>\n                <Form.Control\n                  type=\"number\"\n                  name=\"zipcode\"\n                  placeholder={'Enter your ZIP Code'}\n                  onChange={handleChange}\n                  isValid={touched.zipcode && !errors.zipcode}\n                  isInvalid={!!errors.zipcode}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n              </Form.Group>\n              <div style={{ display: 'flex', flexDirection: 'row-reverse' }}>\n                <Button variant=\"success\" block>Select order</Button>\n              </div>\n            </Form>\n          </div>\n        )}\n      </Formik>\n    </Container>\n  );\n}\n\nexport default OrderForm;\n","import Client from './Client';\n\nconst STOCK_ENDPOINT = '/stock';\n\nexport async function fetchStock() {\n  return await Client.get(STOCK_ENDPOINT);\n}\n\nexport async function createStockItem(item) {\n  Client.post(STOCK_ENDPOINT, item)\n    .then((res) => {\n      return true;\n    })\n    .catch((e) => {\n      return false;\n    });\n}\n\nexport async function updateStockCount(id, updated) {\n  Client.put(`${STOCK_ENDPOINT}/${id}`, updated)\n    .then((res) => {\n      console.log(res);\n      return true;\n    })\n    .catch((e) => {\n      console.error(e)\n      return false;\n    })\n}\n","import React from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { updateStockCount } from '../api/Stock';\n\nconst amountSchema = Yup.object({\n  newCount: Yup.number().integer().moreThan(-1).required(),\n});\n\nfunction StockModal({ show, handleClose, getStock, stockId, stockName, stockCount }) {\n  return (\n    <Modal\n      show={show}\n      onHide={handleClose}\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Formik\n        validationSchema={amountSchema}\n        onSubmit={(updatedCount) => {\n          console.log(updatedCount);\n          updateStockCount(stockId, updatedCount);\n          handleClose();\n          getStock(500);\n        }}\n        initialValues={{\n          newCount: -1,\n        }}\n      >\n        {({\n          handleSubmit,\n          handleChange,\n          handleBlur,\n          values,\n          touched,\n          isValid,\n          errors,\n        }) => (\n          <>\n            <Modal.Header closeButton>\n              <Modal.Title id=\"contained-modal-title-vcenter\">\n                Edit amount for: {stockName}\n              </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <p>Current amount: {stockCount}</p>\n              <Form noValidate onSubmit={handleSubmit}>\n                <Form.Group controlId=\"stockCount\">\n                  <Form.Control\n                    type=\"number\"\n                    name=\"newCount\"\n                    placeholder={'Insert new item count'}\n                    onChange={handleChange}\n                    isValid={touched.newCount && !errors.newCount}\n                    isInvalid={!!errors.newCount}\n                  />\n                  <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                </Form.Group>\n              </Form>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={handleClose}>\n                Close\n              </Button>\n              <Button variant=\"success\" onClick={handleSubmit}>\n                Save new amount\n              </Button>\n            </Modal.Footer>\n          </>\n        )}\n      </Formik>\n    </Modal>\n  );\n}\n\nexport default StockModal;\n","import React, { useEffect, useState } from 'react';\nimport { Button, Badge, Container, Card } from 'react-bootstrap';\nimport StockModal from './StockModal';\n\nfunction StockCard({ stockItem, getStock, lang = 'name' }) {\n  const [showAmountModal, setShowAmountModal] = useState(false);\n  const [hasLanguage, setHasLanguage] = useState(false);\n\n  // Handlers for showing/closing modal when editing item amount\n  const handleClose = () => setShowAmountModal(false);\n  const handleShow = () => setShowAmountModal(true);\n\n  // Determine whether this stock item has a name in the specified language\n  useEffect(() => {\n    setHasLanguage(stockItem[lang] !== undefined);\n  }, [lang, stockItem]);\n\n  return (\n    <>\n      <Card style={{ margin: 5 }}>\n        <Card.Body>\n          <Card.Header as=\"h2\">\n            {hasLanguage ? stockItem[lang] : stockItem.name}\n            {lang !== 'name' && hasLanguage\n              ? ' (' + stockItem['name'] + ')'\n              : ''}\n          </Card.Header>\n\n          <Card.Text>\n            Amount:{' '}\n            <font style={{ fontSize: '1.4em', fontWeight: 'bolder' }}>\n              {stockItem.count}\n            </font>\n          </Card.Text>\n          <Card.Text style={{ textAlign: 'right' }}>\n            Last updated:{' '}\n            {stockItem.timestamp !== undefined\n              ? new Date(stockItem.timestamp).toDateString()\n              : 'Unavailable'}\n          </Card.Text>\n\n          <Container\n            style={{ display: 'flex', alignItems: 'center', padding: 0 }}\n          >\n            {!hasLanguage && (\n              <Badge variant=\"danger\">Language unavailable: {lang}</Badge>\n            )}\n            <div style={{ margin: 'auto' }} />\n            <Button\n              size=\"sm\"\n              variant=\"success\"\n              style={{ alignSelf: 'center' }}\n              onClick={handleShow}\n            >\n              Edit amount\n            </Button>\n          </Container>\n        </Card.Body>\n      </Card>\n\n      <StockModal\n        show={showAmountModal}\n        handleClose={handleClose}\n        getStock={getStock}\n        stockName={hasLanguage ? stockItem[lang] : stockItem.name}\n        stockId={stockItem._id}\n        stockCount={stockItem.count}\n      />\n    </>\n  );\n}\n\nexport default StockCard;\n","import React from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport { createStockItem } from '../api/Stock';\n\nconst stockSchema = Yup.object({\n  name: Yup.string().required(),\n  count: Yup.number().integer().moreThan(-1).required(),\n});\n\n/**\n * Handles creation of new stock items\n */\nfunction StockInput({ getStock }) {\n  return (\n    <Accordion>\n      <Card>\n        <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n          Click here to insert a stock item\n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey=\"0\">\n          <Card.Body>\n            <Formik\n              validationSchema={stockSchema}\n              onSubmit={(item) => {\n                getStock(500);\n                console.log(createStockItem(item));\n              }}\n              initialValues={{\n                name: '',\n                count: -1,\n              }}\n            >\n              {({\n                handleSubmit,\n                handleChange,\n                handleBlur,\n                values,\n                touched,\n                isValid,\n                errors,\n              }) => (\n                <Form noValidate onSubmit={handleSubmit}>\n                  <Form.Group controlId=\"stockInputName\">\n                    <Form.Control\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder={'Insert item name here'}\n                      onChange={handleChange}\n                      isValid={touched.name && !errors.name}\n                      isInvalid={!!errors.name}\n                    />\n                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                  </Form.Group>\n                  <Form.Group controlId=\"stockInputCount\">\n                    <Form.Control\n                      type=\"number\"\n                      name=\"count\"\n                      placeholder={'Insert item count here'}\n                      onChange={handleChange}\n                      isValid={touched.count && !errors.count}\n                      isInvalid={!!errors.count}\n                    />\n                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                  </Form.Group>\n                  <Button variant=\"success\" type=\"submit\">\n                    Add item to database\n                  </Button>\n                </Form>\n              )}\n            </Formik>\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  );\n}\n\nexport default StockInput;\n","import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\n\nfunction Loading() {\n  return (\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n  );\n}\n\nexport default Loading;\n","const LANGUAGES = ['english', 'spanish', 'french', 'chinese'];\n\nexport default LANGUAGES;","import React, { useEffect, useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport StockCard from '../components/StockCard';\nimport StockInput from '../components/StockInput';\nimport { fetchStock } from '../api/Stock';\nimport { Button } from 'react-bootstrap';\nimport Loading from '../components/Loading';\nimport LANGUAGES from '../constants/Languages';\n\n/**\n * Displays the stock of food pantry with options for language\n */\nfunction Stock() {\n  const [stock, setStock] = useState([]);\n  const [error, setError] = useState(false);\n  const [language, setLanguage] = useState(LANGUAGES[0]);\n\n  function getStock(timeout = 0) {\n    // Set stock empty to begin loading spinner\n    setStock([]);\n\n    // Fetch stock after designated time\n    setTimeout(() => {\n      fetchStock()\n        .then((res) => {\n          setStock(res.data);\n        })\n        .catch((e) => setError(true));\n    }, timeout);\n  }\n\n  useEffect(() => {\n    getStock();\n  }, []);\n\n  function capitalize(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n\n  return (\n    <Container>\n      <h1 style={{ textAlign: 'center' }}>Stock</h1>\n      <Container style={{ display: 'flex', alignItems: 'center', padding: 0 }}>\n        <Dropdown onChange={(e) => console.log(e)}>\n          <Dropdown.Toggle\n            variant=\"type\"\n            id=\"dropdown-basic\"\n            size=\"md\"\n            className=\"mb-3\"\n            style={{ backgroundColor: 'green', color: 'white' }}\n          >\n            Language: <b>{capitalize(language)}</b>\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            {LANGUAGES.map((lang) => (\n              <Dropdown.Item\n                onSelect={(key) => setLanguage(key)}\n                eventKey={lang}\n                key={lang}\n              >\n                {capitalize(lang)}\n              </Dropdown.Item>\n            ))}\n          </Dropdown.Menu>\n        </Dropdown>\n        <div style={{ margin: 'auto' }} />\n        <Button\n          variant=\"type\"\n          size=\"md\"\n          onClick={getStock}\n          style={{ backgroundColor: 'green', color: 'white' }}\n        >\n          Refresh\n        </Button>\n      </Container>\n\n      <StockInput getStock={getStock} />\n\n      {stock.length === 0 && !error && <Loading />}\n      {stock &&\n        stock.map((item) => (\n          <StockCard\n            stockItem={item}\n            getStock={getStock}\n            lang={language === 'english' ? 'name' : language}\n            key={item._id}\n          />\n        ))}\n      {error && <p>Error :(</p>}\n    </Container>\n  );\n}\n\nexport default Stock;\n","import React, { useState } from 'react';\nimport { Modal, Button, ButtonGroup } from 'react-bootstrap';\n\n/**\n * Allows user to select how much of a stock item to request\n * TODO: edge cases\n * - user chooses same item more than once\n */\nfunction OrderModal({\n  show,\n  handleClose,\n  getStock,\n  stockId,\n  stockName,\n  stockCount,\n  onRequest,\n}) {\n  // Currently requested amount\n  const [selectedAmount, setSelectedAmount] = useState(1);\n\n  function handleDecrease() {\n    if (selectedAmount > 1) setSelectedAmount(selectedAmount - 1);\n  }\n\n  function handleIncrease() {\n    if (selectedAmount < stockCount) setSelectedAmount(selectedAmount + 1);\n  }\n\n  function submitRequest() {\n    const requestedItem = {\n      id: stockId,\n      name: stockName,\n      requestedCount: selectedAmount,\n      countAfterRequest: stockCount - selectedAmount,\n    };\n    console.log(\"submitRequest -> stockCount\", stockCount)\n    console.log(\"submitRequest -> selectedAmount\", selectedAmount)\n    \n    console.log(\"countAfterRequest ->\", requestedItem.countAfterRequest);\n\n    onRequest(requestedItem);\n    handleClose();\n  }\n\n  return (\n    <Modal\n      show={show}\n      onHide={handleClose}\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Select requested amount for: {stockName}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>\n          Current amount: <b>{stockCount}</b>\n        </p>\n        <p>\n          Amount after order: <b>{stockCount - selectedAmount}</b>\n        </p>\n        <ButtonGroup\n          aria-label=\"Stock item request buttons\"\n          style={{ display: 'flex', alignItems: 'center' }}\n        >\n          <Button size=\"lg\" onClick={handleDecrease}>\n            -\n          </Button>\n          <Button size=\"lg\" variant=\"secondary\" disabled>\n            {selectedAmount}\n          </Button>\n          <Button variant=\"success\" size=\"lg\" onClick={handleIncrease}>\n            +\n          </Button>\n        </ButtonGroup>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>\n          Close\n        </Button>\n        <Button variant=\"success\" onClick={submitRequest}>\n          Request amount\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default OrderModal;\n","import React, { useState, useEffect } from 'react';\nimport { Button, Badge, Container, Card } from 'react-bootstrap';\nimport OrderModal from './OrderModal';\n\n/**\n * Stock item card on order screen\n */\nfunction OrderCard({ stockItem, getStock, lang = 'name', onRequest }) {\n  const [showOrderModal, setShowAmountModal] = useState(false);\n  const [hasLanguage, setHasLanguage] = useState(false);\n\n  // Handlers for showing/closing modal when ordering item\n  const handleClose = () => setShowAmountModal(false);\n  const handleShow = () => setShowAmountModal(true);\n\n  // Determine whether this stock item has a name in the specified language\n  useEffect(() => {\n    setHasLanguage(stockItem[lang] !== undefined);\n  }, [lang, stockItem]);\n\n  return (\n    <>\n      <Card style={{ margin: 5 }}>\n        <Card.Body>\n          <Card.Header as=\"h2\">\n            {hasLanguage ? stockItem[lang] : stockItem.name}\n            {lang !== 'name' && hasLanguage\n              ? ' (' + stockItem['name'] + ')'\n              : ''}\n          </Card.Header>\n\n          <Card.Text>\n            Amount:{' '}\n            <font style={{ fontSize: '1.4em', fontWeight: 'bolder' }}>\n              {stockItem.count}\n            </font>\n          </Card.Text>\n          <Container\n            style={{ display: 'flex', alignItems: 'center', padding: 0 }}\n          >\n            {!hasLanguage && (\n              <Badge variant=\"danger\">Language unavailable: {lang}</Badge>\n            )}\n            <div style={{ margin: 'left' }} />\n            <Button\n              size=\"lg\"\n              variant=\"success\"\n              style={{ alignSelf: 'left' }}\n              onClick={handleShow}\n            >\n              Request Item\n            </Button>\n          </Container>\n          <Card.Text style={{ textAlign: 'right' }}>\n            Last updated:{' '}\n            {stockItem.timestamp !== undefined\n              ? new Date(stockItem.timestamp).toDateString()\n              : 'Unavailable'}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n\n      <OrderModal\n        show={showOrderModal}\n        handleClose={handleClose}\n        getStock={getStock}\n        stockName={hasLanguage ? stockItem[lang] : stockItem.name}\n        stockId={stockItem._id}\n        stockCount={stockItem.count}\n        onRequest={onRequest}\n      />\n    </>\n  );\n}\n\nexport default OrderCard;\n","import React, { useState, useEffect } from 'react';\nimport OrderCard from '../components/OrderCard';\nimport Loading from '../components/Loading';\nimport { fetchStock } from '../api/Stock';\nimport LANGUAGES from '../constants/Languages';\nimport { Container, Dropdown, Button } from 'react-bootstrap';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { addPersonInfo } from '../api/People';\nimport { updateStockCount } from '../api/Stock';\n\n/**\n * Allows user to order stock items only after they've filled out form\n */\nfunction OrderStock() {\n  const history = useHistory();\n  const location = useLocation();\n  const fromForm = location.state !== undefined;\n  const personInfo = fromForm ? location.state.personInfo : {};\n\n  const [stock, setStock] = useState([]);\n  const [error, setError] = useState(false);\n  const [language, setLanguage] = useState(LANGUAGES[0]);\n  const [requestedStockItems, setRequestedStockItems] = useState([]);\n\n  useEffect(() => {\n    // Send user back to form if they didn't fill it out\n    if (!fromForm) {\n      history.push('/order');\n    } else {\n      getStock();\n      console.log(personInfo);\n    }\n  }, [fromForm, history, personInfo]);\n\n  function getStock(timeout = 0) {\n    // Set stock empty to begin loading spinner\n    setStock([]);\n\n    // Fetch stock after designated time\n    setTimeout(() => {\n      fetchStock()\n        .then((res) => {\n          setStock(res.data);\n        })\n        .catch((e) => setError(true));\n    }, timeout);\n  }\n\n  function capitalize(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n\n  /**\n   * Callback for OrderModal to add item to items list\n   * @param {Object} requestedItem { id, name, requestedCount, countAfterRequest }\n   */\n  function onRequest(requestedItem) {\n    setRequestedStockItems(requestedStockItems.concat(requestedItem));\n  }\n\n  function writeRequestToNotes() {\n    let orderNotes = '';\n    requestedStockItems.forEach((item) => {\n      orderNotes += item.name + ': ' + item.requestedCount + ', ';\n    });\n    return orderNotes.slice(0, -2);\n  }\n\n  function submitRequest() {\n    // Send full person info to API\n    const requestBody = {\n      firstname: personInfo.firstName,\n      lastname: personInfo.lastName,\n      adults: personInfo.adults,\n      children: personInfo.adults,\n      zipcode: personInfo.zipcode,\n      'order-notes': writeRequestToNotes(),\n      fulfilled: false\n    };\n    addPersonInfo(requestBody);\n\n    // Send updates for each requested item to API\n    const stockUpdatePromises = requestedStockItems.map((item) => {\n      console.log('making promise... ', item.countAfterRequest);\n      return updateStockCount(item.id, { newCount: item.countAfterRequest })\n    });\n\n    Promise.all(stockUpdatePromises).then((responses) => console.log(responses));\n\n    // Redirect back home\n    history.push('/');\n  }\n\n  return (\n    <Container>\n      <h1 style={{ textAlign: 'center' }}>Select stock here</h1>\n\n      {requestedStockItems.map((r) => (\n        <p key={r.name}>\n          {r.name}: {r.requestedCount}\n        </p>\n      ))}\n\n      <Button variant=\"type\" className=\"mb-3\" onClick={submitRequest} block>\n        Submit request\n      </Button>\n\n      <Container style={{ display: 'flex', alignItems: 'center', padding: 0 }}>\n        <Dropdown variant=\"type\" onChange={(e) => console.log(e)}>\n          <Dropdown.Toggle\n            variant=\"type\"\n            id=\"dropdown-basic\"\n            size=\"md\"\n            className=\"mb-3\"\n            style={{ backgroundColor: 'green', color: 'white' }}\n          >\n            Language: <b>{capitalize(language)}</b>\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            {LANGUAGES.map((lang) => (\n              <Dropdown.Item\n                onSelect={(key) => setLanguage(key)}\n                eventKey={lang}\n                key={lang}\n              >\n                {capitalize(lang)}\n              </Dropdown.Item>\n            ))}\n          </Dropdown.Menu>\n        </Dropdown>\n        <div style={{ margin: 'auto' }} />\n        <Button\n          variant=\"type\"\n          size=\"md\"\n          onClick={getStock}\n          style={{ backgroundColor: 'green', color: 'white' }}\n        >\n          Refresh\n        </Button>\n      </Container>\n\n      {stock.length === 0 && !error && <Loading />}\n      {stock &&\n        fromForm &&\n        stock.map((item) => (\n          <OrderCard\n            stockItem={item}\n            getStock={getStock}\n            lang={language === 'english' ? 'name' : language}\n            key={item._id}\n            onRequest={onRequest}\n          />\n        ))}\n      {error && <p>Error</p>}\n    </Container>\n  );\n}\n\nexport default OrderStock;\n","import React, { useState, useEffect } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport Container from 'react-bootstrap/Container';\nimport { Button, Col, Row } from 'react-bootstrap';\nconst ENDPOINT = \"http://localhost:3000\"; //needs to be changed to heroku after testing\n\nlet listpeople = []\n\nfunction SocketTest() {\n\n  \n  \n  const [response, setResponse] = useState(listpeople);\n  const socket = socketIOClient(ENDPOINT)\n    useEffect(() => {\n      socket.on(\"person\", data => {\n        eventHandler(data)\n        \n      })\n\n      const eventHandler = (data) => {\n        listpeople = listpeople.concat(data)\n          setResponse(listpeople)\n      }\n      return () => {\n        console.log(\"effect done\")\n        socket.off(\"person\", eventHandler(\"\"))\n      }\n        \n        \n    }, [])\n\n    function personFulfilled(id) {\n      socket.emit(\"personFulfilled\", id)\n    }\n    //useState(/*this sets initial value and kind of type*/) //keeps some memory for this component\n    //useEffect()//as soon as this is rendered do all this code\n    //also needs a list so it doesn't break forever\n\n    //once they get fulfilled it needs to actually just delete it and then make a new one\n  return (\n    <Container>\n      {response &&\n        response.map((item, index) => (\n          <Button key={item._id} size=\"lg\" onClick = {() => {personFulfilled(item._id)}}>\n            {item._id} {item.lastname}, {item.fulfilled.toString()},{item[index]}\n          </Button>\n\n        ))}\n    </Container>\n  );\n}\n\nexport default SocketTest;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Home from './pages/Home';\nimport Order from './pages/Order';\nimport Stock from './pages/Stock';\nimport OrderStock from './pages/OrderStock';\nimport SocketTest from './pages/SocketTest'\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Navbar รง/>\n      <br />\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/stock\">\n          <Stock />\n        </Route>\n        <Route path=\"/order\">\n          <Order />\n        </Route>\n        <Route path=\"/order-stock\">\n          <OrderStock />\n        </Route>\n        <Route path=\"/sockettest\">\n          <SocketTest />\n        </Route>\n        <Route path=\"*\">\n          <h1>Welcome to <font style={{color:'#26B020'}}>Pan-Lang</font>!</h1>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}