{"version":3,"sources":["components/Navbar.js","pages/Home.js","pages/Order.js","api/Client.js","api/Stock.js","components/StockModal.js","components/StockCard.js","components/StockInput.js","pages/Stock.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","bg","Brand","as","Link","to","Nav","className","Home","Container","Order","axios","create","baseURL","fetchStock","a","Client","get","promise","item","post","then","res","catch","e","id","updated","put","console","log","error","amountSchema","Yup","newCount","integer","moreThan","required","StockModal","show","handleClose","getStock","stockId","stockName","stockCount","Modal","onHide","aria-labelledby","centered","validationSchema","onSubmit","updatedCount","updateStockCount","initialValues","handleSubmit","handleChange","touched","handleBlur","values","errors","isValid","Header","closeButton","Title","Body","Form","noValidate","Group","controlId","Control","type","name","placeholder","onChange","isInvalid","Feedback","Footer","Button","variant","onClick","StockCard","stockItem","lang","useState","showAmountModal","setShowAmountModal","hasLanguage","setHasLanguage","useEffect","undefined","Card","style","margin","Text","count","textAlign","timestamp","Date","toDateString","display","alignItems","padding","size","alignSelf","Badge","_id","stockSchema","StockInput","Accordion","Toggle","eventKey","Collapse","createStockItem","LANGUAGES","Stock","stock","setStock","setError","language","setLanguage","timeout","setTimeout","data","Dropdown","Menu","map","Item","onSelect","key","length","Spinner","animation","role","App","basename","process","รง","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.96a7d093.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nfunction NavigationBar() {\r\n  return (\r\n    <Navbar bg=\"light\">\r\n      <Navbar.Brand as={Link} to=\"/\">PanLang</Navbar.Brand>\r\n      <Nav className=\"mr-auto\">\r\n        <Nav.Link as={Link} to=\"/order\">Order</Nav.Link>\r\n        <Nav.Link as={Link} to=\"/stock\">Stock</Nav.Link>\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default NavigationBar;\r\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nfunction Home() {\n  return (\n    <Container>\n      <h1>Welcome to PanLang!</h1>\n    </Container>\n  );\n}\n\nexport default Home;\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction Order() {\r\n  return (\r\n    <Container>\r\n      <h1>Order</h1>\r\n      <p>This is gonna be an order form in the future</p>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Order;\r\n","import axios from 'axios';\r\n\r\nconst BASE_API_URL = 'https://panlang.herokuapp.com';\r\n\r\nexport default axios.create({\r\n  baseURL: BASE_API_URL,\r\n});\r\n","import Client from './Client';\r\n\r\nconst STOCK_ENDPOINT = '/stock';\r\n\r\nexport async function fetchStock() {\r\n  const promise = await Client.get(STOCK_ENDPOINT);\r\n  return promise;\r\n}\r\n\r\nexport async function createStockItem(item) {\r\n  Client.post(STOCK_ENDPOINT, item)\r\n    .then((res) => {\r\n      return true;\r\n    })\r\n    .catch((e) => {\r\n      return false;\r\n    });\r\n}\r\n\r\nexport async function updateStockCount(id, updated) {\r\n  Client.put(`${STOCK_ENDPOINT}/${id}`, updated)\r\n    .then((res) => {\r\n      console.log(res);\r\n      return true;\r\n    })\r\n    .catch((e) => {\r\n      console.error(e)\r\n      return false;\r\n    })\r\n}\r\n","import React from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { updateStockCount } from '../api/Stock';\r\n\r\nconst amountSchema = Yup.object({\r\n  newCount: Yup.number().integer().moreThan(-1).required(),\r\n});\r\n\r\nfunction StockModal({ show, handleClose, getStock, stockId, stockName, stockCount }) {\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={handleClose}\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Formik\r\n        validationSchema={amountSchema}\r\n        onSubmit={(updatedCount) => {\r\n          console.log(updatedCount);\r\n          updateStockCount(stockId, updatedCount);\r\n          handleClose();\r\n          getStock(500);\r\n        }}\r\n        initialValues={{\r\n          newCount: -1,\r\n        }}\r\n      >\r\n        {({\r\n          handleSubmit,\r\n          handleChange,\r\n          handleBlur,\r\n          values,\r\n          touched,\r\n          isValid,\r\n          errors,\r\n        }) => (\r\n          <div>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Edit amount for: {stockName}\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <p>Current amount: {stockCount}</p>\r\n              <Form noValidate onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"stockCount\">\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    name=\"newCount\"\r\n                    placeholder={'Insert new item count'}\r\n                    onChange={handleChange}\r\n                    isValid={touched.newCount && !errors.newCount}\r\n                    isInvalid={!!errors.newCount}\r\n                  />\r\n                  <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                </Form.Group>\r\n              </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleClose}>\r\n                Close\r\n              </Button>\r\n              <Button variant=\"primary\" onClick={handleSubmit}>\r\n                Save new amount\r\n              </Button>\r\n            </Modal.Footer>\r\n          </div>\r\n        )}\r\n      </Formik>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default StockModal;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Badge, Container, Card } from 'react-bootstrap';\r\nimport StockModal from './StockModal';\r\n\r\nfunction StockCard({ stockItem, getStock, lang = 'name' }) {\r\n  const [showAmountModal, setShowAmountModal] = useState(false);\r\n  const [hasLanguage, setHasLanguage] = useState(false);\r\n\r\n  // Handlers for showing/closing modal when editing item amount\r\n  const handleClose = () => setShowAmountModal(false);\r\n  const handleShow = () => setShowAmountModal(true);\r\n\r\n  // Determine whether this stock item has a name in the specified language\r\n  useEffect(() => {\r\n    setHasLanguage(stockItem[lang] !== undefined);\r\n  }, [lang, stockItem]);\r\n\r\n  return (\r\n    <>\r\n      <Card style={{ margin: 5 }}>\r\n        <Card.Body>\r\n          <Card.Title>\r\n            {hasLanguage ? stockItem[lang] : stockItem.name}\r\n          </Card.Title>\r\n\r\n          <Card.Text>\r\n            Amount: <b>{stockItem.count}</b>\r\n          </Card.Text>\r\n          <Card.Text style={{ textAlign: 'right' }}>\r\n            Last updated:{' '}\r\n            {stockItem.timestamp !== undefined\r\n              ? new Date(stockItem.timestamp).toDateString()\r\n              : 'Unavailable'}\r\n          </Card.Text>\r\n\r\n          <Container\r\n            style={{ display: 'flex', alignItems: 'center', padding: 0 }}\r\n          >\r\n            <Button\r\n              size=\"sm\"\r\n              variant=\"info\"\r\n              style={{ alignSelf: 'center' }}\r\n              onClick={handleShow}\r\n            >\r\n              Edit amount\r\n            </Button>\r\n            <div style={{ margin: 'auto' }} />\r\n            {!hasLanguage && (\r\n              <Badge variant=\"danger\">Language unavailable</Badge>\r\n            )}\r\n          </Container>\r\n        </Card.Body>\r\n      </Card>\r\n\r\n      <StockModal\r\n        show={showAmountModal}\r\n        handleClose={handleClose}\r\n        getStock={getStock}\r\n        stockName={hasLanguage ? stockItem[lang] : stockItem.name}\r\n        stockId={stockItem._id}\r\n        stockCount={stockItem.count}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StockCard;\r\n","import React from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { createStockItem } from '../api/Stock';\r\n\r\nconst stockSchema = Yup.object({\r\n  name: Yup.string().required(),\r\n  count: Yup.number().integer().moreThan(-1).required(),\r\n});\r\n\r\n/**\r\n * Handles creation of new stock items\r\n */\r\nfunction StockInput({ getStock }) {\r\n  return (\r\n    <Accordion>\r\n      <Card>\r\n        <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n          Click here to insert a stock item\r\n        </Accordion.Toggle>\r\n        <Accordion.Collapse eventKey=\"0\">\r\n          <Card.Body>\r\n            <Formik\r\n              validationSchema={stockSchema}\r\n              onSubmit={(item) => {\r\n                getStock(500);\r\n                console.log(createStockItem(item));\r\n              }}\r\n              initialValues={{\r\n                name: '',\r\n                count: -1,\r\n              }}\r\n            >\r\n              {({\r\n                handleSubmit,\r\n                handleChange,\r\n                handleBlur,\r\n                values,\r\n                touched,\r\n                isValid,\r\n                errors,\r\n              }) => (\r\n                <Form noValidate onSubmit={handleSubmit}>\r\n                  <Form.Group controlId=\"stockInputName\">\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      placeholder={'Insert item name here'}\r\n                      onChange={handleChange}\r\n                      isValid={touched.name && !errors.name}\r\n                      isInvalid={!!errors.name}\r\n                    />\r\n                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"stockInputCount\">\r\n                    <Form.Control\r\n                      type=\"number\"\r\n                      name=\"count\"\r\n                      placeholder={'Insert item count here'}\r\n                      onChange={handleChange}\r\n                      isValid={touched.count && !errors.count}\r\n                      isInvalid={!!errors.count}\r\n                    />\r\n                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                  </Form.Group>\r\n                  <Button variant=\"success\" type=\"submit\">\r\n                    Add item to database\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  );\r\n}\r\n\r\nexport default StockInput;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport StockCard from '../components/StockCard';\r\nimport StockInput from '../components/StockInput';\r\nimport { fetchStock } from '../api/Stock';\r\nimport { Button } from 'react-bootstrap';\r\n\r\n// TODO: move all languages to a more global constant\r\nconst LANGUAGES = ['english', 'spanish', 'french', 'chinese'];\r\n\r\n/**\r\n * Displays the stock of food pantry with options for language\r\n */\r\nfunction Stock() {\r\n  const [stock, setStock] = useState([]);\r\n  const [error, setError] = useState(false);\r\n  const [language, setLanguage] = useState(LANGUAGES[0]);\r\n\r\n  function getStock(timeout = 0) {\r\n    // Set stock empty to begin loading spinner\r\n    setStock([]);\r\n\r\n    // Fetch stock after designated time\r\n    setTimeout(() => {\r\n      fetchStock()\r\n        .then((res) => {\r\n          setStock(res.data);\r\n        })\r\n        .catch((e) => setError(true));\r\n    }, timeout);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getStock();\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <h1 style={{ textAlign: 'center' }}>Stock</h1>\r\n      <Container style={{ display: 'flex', alignItems: 'center', padding: 0 }}>\r\n        <Dropdown onChange={(e) => console.log(e)}>\r\n          <Dropdown.Toggle id=\"dropdown-basic\" size=\"md\" className=\"mb-3\">\r\n            Language: <b>{language}</b>\r\n          </Dropdown.Toggle>\r\n          <Dropdown.Menu>\r\n            {LANGUAGES.map((lang) => (\r\n              <Dropdown.Item\r\n                onSelect={(key) => setLanguage(key)}\r\n                eventKey={lang}\r\n                key={lang}\r\n              >\r\n                {lang}\r\n              </Dropdown.Item>\r\n            ))}\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n        <div style={{ margin: 'auto' }} />\r\n        <Button size=\"md\" onClick={getStock}>\r\n          Refresh\r\n        </Button>\r\n      </Container>\r\n\r\n      <StockInput getStock={getStock} />\r\n\r\n      {stock.length === 0 && !error && (\r\n        <Spinner animation=\"border\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n      )}\r\n      {stock &&\r\n        stock.map((item) => (\r\n          <StockCard\r\n            stockItem={item}\r\n            getStock={getStock}\r\n            lang={language === 'english' ? 'name' : language}\r\n            key={item._id}\r\n          />\r\n        ))}\r\n      {error && <p>Error :(</p>}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Stock;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Navbar from './components/Navbar';\r\nimport Home from './pages/Home';\r\nimport Order from './pages/Order';\r\nimport Stock from './pages/Stock';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Navbar รง/>\r\n      <br />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"/stock\">\r\n          <Stock />\r\n        </Route>\r\n        <Route path=\"/order\">\r\n          <Order />\r\n        </Route>\r\n        <Route path=\"*\">\r\n          <h1>404</h1>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}